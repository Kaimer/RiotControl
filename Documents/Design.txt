The statistics engine needs to process different types of jobs, which are:

1. summoner lookup job: caused by a user, concurrent lookups of a particular summoner name across all regions
2. summoner update job: causer by a user, update of an existing summoner in the database on a single region given the account ID
3. auto update job: causer by a timer in the statistics engine (e.g. 10-20 min timer), routine updates of summoners (that have the auto update flag set) given their account IDs in case no jobs of type 1 are available

So there are two different types of jobs in different queues that have different priorities.
The basic algorithm for each region handler is as follows:

while true
	if summoner lookup job available
		process summoner lookup job
	else if summoner update job available
		process summoner update job
	else if routine update job available
		process routine update job
	else
		wait for an event that is triggered when a new job in one of the queues is submitted

There are several problems with this that need to be addressed.

Queue updates:

Removal and addition of jobs in the three queues must be properly locked to avoid concurrency issues with the workers.

Processing user submission jobs:

Optimally the lookup of a summoner name would be made available to the client asynchronously from three different requests (one for each region), using JavaScript XMLHttpRequest.
A summoner update could use the same underlying mechanism, but it would probably be nicer to implement this in a blocking manner from the client's perspective.
The question is how the HTTP request handler should be informed about the result from the worker.
Obviously this should involve no polling and should be solved using proper thread synchronisation.

Region handlers should offer a blocking interface for the HTTP request handlers to solve this.
Each user submission job provides a property to store the result obtained from the worker and an AutoResetEvent that is used to achieve synchronisation between worker and the blocking method in the region handler.
It should probably use a timeout to avoid indefinitely taking up resources from malicious requests.

Waiting for the job event:

The event is raised by the region handler and can stem from two different sources, which are either the users or a timer in the stats engine.
It is possible that none of the worker threads are waiting at the point in time when the event is raised.
Wakeup calls must never be lost!
This might be solved by having one AutoResetEvent in each worker that indicates if there is possibly work waiting.
When a new job is added to any queue the event can be set for all threads.
